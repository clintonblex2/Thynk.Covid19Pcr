// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Thynk.Covid19Pcr.Infrastructure.DbContexts;

namespace Thynk.Covid19Pcr.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211130195341_UpdatedBookingTblColSize")]
    partial class UpdatedBookingTblColSize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.AvailableTestDays", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AvailableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OpenSlots")
                        .HasColumnType("int");

                    b.Property<long>("TestLabId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TestLabId");

                    b.ToTable("AvailableTestDays");

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 53, 38, 192, DateTimeKind.Local).AddTicks(4409),
                            CreatedBy = "Elaine19",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 208, DateTimeKind.Local).AddTicks(5668),
                            OpenSlots = 55,
                            TestLabId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 53, 38, 192, DateTimeKind.Local).AddTicks(4409),
                            CreatedBy = "Wilma.McClure15",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 208, DateTimeKind.Local).AddTicks(5668),
                            OpenSlots = 98,
                            TestLabId = 4L
                        },
                        new
                        {
                            Id = 4L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 53, 38, 192, DateTimeKind.Local).AddTicks(4409),
                            CreatedBy = "Guy70",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 208, DateTimeKind.Local).AddTicks(5668),
                            OpenSlots = 52,
                            TestLabId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 53, 38, 192, DateTimeKind.Local).AddTicks(4409),
                            CreatedBy = "Marianne5",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 208, DateTimeKind.Local).AddTicks(5668),
                            OpenSlots = 90,
                            TestLabId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 53, 38, 192, DateTimeKind.Local).AddTicks(4409),
                            CreatedBy = "Robin24",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 208, DateTimeKind.Local).AddTicks(5668),
                            OpenSlots = 72,
                            TestLabId = 11L
                        },
                        new
                        {
                            Id = 7L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 53, 38, 192, DateTimeKind.Local).AddTicks(4409),
                            CreatedBy = "Lynn.Batz",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 208, DateTimeKind.Local).AddTicks(5668),
                            OpenSlots = 79,
                            TestLabId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 53, 38, 192, DateTimeKind.Local).AddTicks(4409),
                            CreatedBy = "Cathy58",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 208, DateTimeKind.Local).AddTicks(5668),
                            OpenSlots = 85,
                            TestLabId = 5L
                        },
                        new
                        {
                            Id = 9L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 53, 38, 192, DateTimeKind.Local).AddTicks(4409),
                            CreatedBy = "Gretchen39",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 208, DateTimeKind.Local).AddTicks(5668),
                            OpenSlots = 92,
                            TestLabId = 5L
                        },
                        new
                        {
                            Id = 10L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 53, 38, 192, DateTimeKind.Local).AddTicks(4409),
                            CreatedBy = "Shelley87",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 208, DateTimeKind.Local).AddTicks(5668),
                            OpenSlots = 97,
                            TestLabId = 5L
                        },
                        new
                        {
                            Id = 11L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 53, 38, 192, DateTimeKind.Local).AddTicks(4409),
                            CreatedBy = "Kristopher_Wolff70",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 208, DateTimeKind.Local).AddTicks(5668),
                            OpenSlots = 74,
                            TestLabId = 6L
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.Patients", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber", "Email");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Age = 0,
                            CreatedBy = "Dwayne.Kirlin",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1964, 4, 14, 12, 52, 21, 493, DateTimeKind.Local).AddTicks(4543),
                            Email = "Dwayne_Kirlin@gmail.com",
                            FirstName = "German",
                            Gender = "Male",
                            LastName = "Wuckert",
                            PhoneNumber = "07042951339"
                        },
                        new
                        {
                            Id = 2L,
                            Age = 0,
                            CreatedBy = "Adrienne19",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1958, 4, 20, 8, 52, 22, 260, DateTimeKind.Local).AddTicks(9226),
                            Email = "Adrienne_Boyer@hotmail.com",
                            FirstName = "Brandy",
                            Gender = "Female",
                            LastName = "Robel",
                            PhoneNumber = "07048492317"
                        },
                        new
                        {
                            Id = 3L,
                            Age = 0,
                            CreatedBy = "Christopher95",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1974, 6, 7, 23, 36, 48, 747, DateTimeKind.Local).AddTicks(9276),
                            Email = "Christopher.Rath@gmail.com",
                            FirstName = "Kathleen",
                            Gender = "Female",
                            LastName = "Bergstrom",
                            PhoneNumber = "07019993749"
                        },
                        new
                        {
                            Id = 4L,
                            Age = 0,
                            CreatedBy = "Bridget.Goodwin46",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1986, 10, 23, 4, 33, 46, 466, DateTimeKind.Local).AddTicks(3610),
                            Email = "Bridget_Goodwin74@hotmail.com",
                            FirstName = "Dayne",
                            Gender = "Male",
                            LastName = "Kutch",
                            PhoneNumber = "07067774125"
                        },
                        new
                        {
                            Id = 5L,
                            Age = 0,
                            CreatedBy = "Joanne.Botsford",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1971, 12, 5, 5, 58, 44, 331, DateTimeKind.Local).AddTicks(4588),
                            Email = "Joanne.Botsford@hotmail.com",
                            FirstName = "Jefferey",
                            Gender = "Female",
                            LastName = "Lakin",
                            PhoneNumber = "07004681381"
                        },
                        new
                        {
                            Id = 6L,
                            Age = 0,
                            CreatedBy = "Leonard_Reynolds",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1967, 5, 1, 14, 12, 48, 190, DateTimeKind.Local).AddTicks(273),
                            Email = "Leonard70@gmail.com",
                            FirstName = "Ricky",
                            Gender = "Female",
                            LastName = "Wyman",
                            PhoneNumber = "07033130782"
                        },
                        new
                        {
                            Id = 7L,
                            Age = 0,
                            CreatedBy = "Johnathan_Aufderhar10",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1977, 7, 13, 8, 18, 45, 680, DateTimeKind.Local).AddTicks(1755),
                            Email = "Johnathan.Aufderhar96@yahoo.com",
                            FirstName = "Elisabeth",
                            Gender = "Male",
                            LastName = "Ruecker",
                            PhoneNumber = "07050474687"
                        },
                        new
                        {
                            Id = 8L,
                            Age = 0,
                            CreatedBy = "Rachael21",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1989, 7, 14, 23, 9, 31, 604, DateTimeKind.Local).AddTicks(1183),
                            Email = "Rachael.Wintheiser66@yahoo.com",
                            FirstName = "Darren",
                            Gender = "Male",
                            LastName = "Adams",
                            PhoneNumber = "07041236737"
                        },
                        new
                        {
                            Id = 9L,
                            Age = 0,
                            CreatedBy = "Samantha79",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1973, 8, 29, 2, 19, 34, 800, DateTimeKind.Local).AddTicks(652),
                            Email = "Samantha5@hotmail.com",
                            FirstName = "Fredy",
                            Gender = "Male",
                            LastName = "Howell",
                            PhoneNumber = "07055652708"
                        },
                        new
                        {
                            Id = 10L,
                            Age = 0,
                            CreatedBy = "Horace.Ortiz99",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1977, 12, 21, 4, 46, 56, 366, DateTimeKind.Local).AddTicks(3422),
                            Email = "Horace.Ortiz68@gmail.com",
                            FirstName = "Bethel",
                            Gender = "Female",
                            LastName = "Schamberger",
                            PhoneNumber = "07077386138"
                        },
                        new
                        {
                            Id = 11L,
                            Age = 0,
                            CreatedBy = "Troy_Labadie",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1959, 6, 8, 7, 34, 18, 300, DateTimeKind.Local).AddTicks(4240),
                            Email = "Troy_Labadie@gmail.com",
                            FirstName = "Lawson",
                            Gender = "Female",
                            LastName = "Rice",
                            PhoneNumber = "07010630484"
                        },
                        new
                        {
                            Id = 12L,
                            Age = 0,
                            CreatedBy = "Kelli5",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1989, 7, 28, 23, 52, 25, 483, DateTimeKind.Local).AddTicks(9196),
                            Email = "Kelli_Russel@hotmail.com",
                            FirstName = "Germaine",
                            Gender = "Male",
                            LastName = "Gusikowski",
                            PhoneNumber = "07091241938"
                        },
                        new
                        {
                            Id = 13L,
                            Age = 0,
                            CreatedBy = "Judith6",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1999, 7, 17, 21, 21, 16, 40, DateTimeKind.Local).AddTicks(1056),
                            Email = "Judith.Raynor73@yahoo.com",
                            FirstName = "Trycia",
                            Gender = "Male",
                            LastName = "King",
                            PhoneNumber = "07095923369"
                        },
                        new
                        {
                            Id = 14L,
                            Age = 0,
                            CreatedBy = "Preston.Heller",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1959, 9, 8, 5, 48, 22, 445, DateTimeKind.Local).AddTicks(2630),
                            Email = "Preston.Heller@hotmail.com",
                            FirstName = "Nathen",
                            Gender = "Female",
                            LastName = "Grant",
                            PhoneNumber = "07077453508"
                        },
                        new
                        {
                            Id = 15L,
                            Age = 0,
                            CreatedBy = "Bryan_VonRueden",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1951, 12, 3, 9, 12, 14, 300, DateTimeKind.Local).AddTicks(4355),
                            Email = "Bryan97@gmail.com",
                            FirstName = "Casey",
                            Gender = "Male",
                            LastName = "Windler",
                            PhoneNumber = "07068496873"
                        },
                        new
                        {
                            Id = 16L,
                            Age = 0,
                            CreatedBy = "Ethel.Considine",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1964, 8, 3, 19, 30, 17, 385, DateTimeKind.Local).AddTicks(9770),
                            Email = "Ethel_Considine@hotmail.com",
                            FirstName = "Monique",
                            Gender = "Male",
                            LastName = "Vandervort",
                            PhoneNumber = "07067899280"
                        },
                        new
                        {
                            Id = 17L,
                            Age = 0,
                            CreatedBy = "Belinda61",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1965, 6, 27, 13, 13, 30, 406, DateTimeKind.Local).AddTicks(6246),
                            Email = "Belinda.Brown60@hotmail.com",
                            FirstName = "Noelia",
                            Gender = "Female",
                            LastName = "Rosenbaum",
                            PhoneNumber = "07084552173"
                        },
                        new
                        {
                            Id = 18L,
                            Age = 0,
                            CreatedBy = "Karla71",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1965, 10, 4, 7, 24, 34, 329, DateTimeKind.Local).AddTicks(1854),
                            Email = "Karla.Ruecker@gmail.com",
                            FirstName = "Kamryn",
                            Gender = "Female",
                            LastName = "Wiegand",
                            PhoneNumber = "07009197119"
                        },
                        new
                        {
                            Id = 19L,
                            Age = 0,
                            CreatedBy = "Joanne70",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1991, 3, 17, 3, 56, 24, 753, DateTimeKind.Local).AddTicks(9366),
                            Email = "Joanne_Kuphal@yahoo.com",
                            FirstName = "Mollie",
                            Gender = "Male",
                            LastName = "Streich",
                            PhoneNumber = "07009143101"
                        },
                        new
                        {
                            Id = 20L,
                            Age = 0,
                            CreatedBy = "Wendy.Quigley93",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 431, DateTimeKind.Local).AddTicks(6349),
                            DateOfBirth = new DateTime(1956, 1, 2, 16, 41, 53, 437, DateTimeKind.Local).AddTicks(5509),
                            Email = "Wendy.Quigley29@gmail.com",
                            FirstName = "Jed",
                            Gender = "Female",
                            LastName = "Cremin",
                            PhoneNumber = "07018008620"
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestBookings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AvailableTestDayId")
                        .HasColumnType("bigint");

                    b.Property<string>("BookingReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long>("VaccineTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailableTestDayId");

                    b.HasIndex("BookingReference");

                    b.HasIndex("PatientId");

                    b.HasIndex("VaccineTypeId");

                    b.ToTable("TestBookings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailableTestDayId = 9L,
                            BookingReference = "MQIUE9G9VJ",
                            BookingStatus = "Booked",
                            CreatedBy = "Gertrude0",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 531, DateTimeKind.Local).AddTicks(6109),
                            PatientId = 1L,
                            VaccineTypeId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AvailableTestDayId = 9L,
                            BookingReference = "PFNFGHZHJU",
                            BookingStatus = "Booked",
                            CreatedBy = "Sophia_Langosh",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 531, DateTimeKind.Local).AddTicks(6109),
                            PatientId = 7L,
                            VaccineTypeId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AvailableTestDayId = 6L,
                            BookingReference = "DDGSC5GOWX",
                            BookingStatus = "Booked",
                            CreatedBy = "Joy_Tromp",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 531, DateTimeKind.Local).AddTicks(6109),
                            PatientId = 6L,
                            VaccineTypeId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            AvailableTestDayId = 8L,
                            BookingReference = "XCHULY35Y6",
                            BookingStatus = "Booked",
                            CreatedBy = "Amber44",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 531, DateTimeKind.Local).AddTicks(6109),
                            PatientId = 6L,
                            VaccineTypeId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            AvailableTestDayId = 5L,
                            BookingReference = "KIBNCZYHG0",
                            BookingStatus = "Booked",
                            CreatedBy = "Ramon45",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 531, DateTimeKind.Local).AddTicks(6109),
                            PatientId = 6L,
                            VaccineTypeId = 1L
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestLabs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LabName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("TestLocationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LabName");

                    b.HasIndex("TestLocationId");

                    b.ToTable("TestLabs");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = "Freddie.Kemmer73",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 803, DateTimeKind.Local).AddTicks(9723),
                            IsActive = true,
                            LabName = "Medbury Services Limited",
                            TestLocationId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = "Melvin_Halvorson81",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 803, DateTimeKind.Local).AddTicks(9723),
                            IsActive = true,
                            LabName = "Sahel Lab",
                            TestLocationId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = "Candace_Schulist94",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 803, DateTimeKind.Local).AddTicks(9723),
                            IsActive = true,
                            LabName = "Epiconsult clinic and Diagnostics Center",
                            TestLocationId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = "Bethany47",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 803, DateTimeKind.Local).AddTicks(9723),
                            IsActive = true,
                            LabName = "Centolab",
                            TestLocationId = 3L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = "Louis23",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 803, DateTimeKind.Local).AddTicks(9723),
                            IsActive = true,
                            LabName = "A-Medik Molecular Laboratory",
                            TestLocationId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = "Tommie.Dibbert14",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 803, DateTimeKind.Local).AddTicks(9723),
                            IsActive = true,
                            LabName = "Cedarcrest Hospital Molecular Laboratory",
                            TestLocationId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedBy = "Barry.Hammes51",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 803, DateTimeKind.Local).AddTicks(9723),
                            IsActive = true,
                            LabName = "Clina Lancet",
                            TestLocationId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedBy = "Ida.Herman14",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 803, DateTimeKind.Local).AddTicks(9723),
                            IsActive = true,
                            LabName = "Biologix Support Services",
                            TestLocationId = 1L
                        },
                        new
                        {
                            Id = 9L,
                            CreatedBy = "Belinda.OHara25",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 803, DateTimeKind.Local).AddTicks(9723),
                            IsActive = true,
                            LabName = "Clinix Healthcare",
                            TestLocationId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            CreatedBy = "Janice_Leuschke38",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 803, DateTimeKind.Local).AddTicks(9723),
                            IsActive = true,
                            LabName = "Reddington Zainelab",
                            TestLocationId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            CreatedBy = "Eric.Moore14",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 803, DateTimeKind.Local).AddTicks(9723),
                            IsActive = true,
                            LabName = "Medbury Services Limited",
                            TestLocationId = 2L
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestLocations", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOperational")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("City");

                    b.ToTable("TestLocations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "Abuja",
                            Country = "Nigeria",
                            CreatedBy = "Seth.Hegmann77",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 850, DateTimeKind.Local).AddTicks(6216),
                            IsOperational = true
                        },
                        new
                        {
                            Id = 2L,
                            City = "Lagos",
                            Country = "Nigeria",
                            CreatedBy = "Holly.Ward",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 850, DateTimeKind.Local).AddTicks(6216),
                            IsOperational = true
                        },
                        new
                        {
                            Id = 3L,
                            City = "Port-harcourt",
                            Country = "Nigeria",
                            CreatedBy = "Omar.Cronin71",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 850, DateTimeKind.Local).AddTicks(6216),
                            IsOperational = true
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.VaccineTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RecommendedAge")
                        .HasColumnType("int");

                    b.Property<long?>("TestLabsId")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalSupplied")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("TestLabsId");

                    b.ToTable("VaccineTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = "Olive30",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 910, DateTimeKind.Local).AddTicks(6817),
                            Description = "sensor copy Algerian Dinar open-source connecting quantify global IB Argentine Peso Personal Loan Account monitor Gorgeous Fresh Gloves parse Rubber benchmark Niue Auto Loan Account Turnpike circuit Inverse",
                            IsApproved = true,
                            Name = "Pfizer-BioNTech",
                            RecommendedAge = 5,
                            TotalSupplied = 511
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = "Tomas_Wilkinson",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 910, DateTimeKind.Local).AddTicks(6817),
                            Description = "Home Loan Account invoice redefine Stream Strategist leverage Isle Intranet scalable Handcrafted Incredible Grocery, Home & Industrial extranet Tools & Jewelery navigating Customer Security Tasty Cotton Checking Account",
                            IsApproved = true,
                            Name = "Moderna",
                            RecommendedAge = 18,
                            TotalSupplied = 502
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = "Violet24",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 53, 38, 910, DateTimeKind.Local).AddTicks(6817),
                            Description = "matrix e-business facilitate Personal Loan Account value-added Customer Fantastic Fresh Salad sensor SMS Configuration dot-com high-level Gambia Fantastic Metal Pants Marketing invoice hack yellow infrastructures New Jersey",
                            IsApproved = false,
                            Name = "Johnson & Johnson’s",
                            RecommendedAge = 18,
                            TotalSupplied = 805
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.AvailableTestDays", b =>
                {
                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.TestLabs", "TestLab")
                        .WithMany("AvailableDays")
                        .HasForeignKey("TestLabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestLab");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestBookings", b =>
                {
                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.AvailableTestDays", "AvailableTestDay")
                        .WithMany()
                        .HasForeignKey("AvailableTestDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.Patients", "Patient")
                        .WithMany("TestBookings")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.VaccineTypes", "VaccineType")
                        .WithMany()
                        .HasForeignKey("VaccineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Thynk.Covid19Pcr.Domain.Entities.CovidTestResult", "TestResult", b1 =>
                        {
                            b1.Property<long>("TestBookingsId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("ResultType")
                                .HasColumnType("int");

                            b1.Property<DateTime>("TestResultDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("TestBookingsId");

                            b1.ToTable("TestBookings");

                            b1.WithOwner()
                                .HasForeignKey("TestBookingsId");
                        });

                    b.Navigation("AvailableTestDay");

                    b.Navigation("Patient");

                    b.Navigation("TestResult");

                    b.Navigation("VaccineType");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestLabs", b =>
                {
                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.TestLocations", "TestLocation")
                        .WithMany("LabsInLocation")
                        .HasForeignKey("TestLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestLocation");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.VaccineTypes", b =>
                {
                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.TestLabs", null)
                        .WithMany("Vaccines")
                        .HasForeignKey("TestLabsId");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.Patients", b =>
                {
                    b.Navigation("TestBookings");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestLabs", b =>
                {
                    b.Navigation("AvailableDays");

                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestLocations", b =>
                {
                    b.Navigation("LabsInLocation");
                });
#pragma warning restore 612, 618
        }
    }
}
