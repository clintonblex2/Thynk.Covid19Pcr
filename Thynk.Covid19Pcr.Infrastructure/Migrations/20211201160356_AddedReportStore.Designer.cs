// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Thynk.Covid19Pcr.Infrastructure.DbContexts;

namespace Thynk.Covid19Pcr.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211201160356_AddedReportStore")]
    partial class AddedReportStore
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.AvailableTestDays", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AvailableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OpenSlots")
                        .HasColumnType("int");

                    b.Property<long>("TestLabId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TestLabId");

                    b.ToTable("AvailableTestDays");

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            AvailableDate = new DateTime(2021, 12, 2, 17, 3, 54, 946, DateTimeKind.Local).AddTicks(7744),
                            CreatedBy = "Jackie.Kuhic",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 54, 950, DateTimeKind.Local).AddTicks(8316),
                            OpenSlots = 80,
                            TestLabId = 10L
                        },
                        new
                        {
                            Id = 3L,
                            AvailableDate = new DateTime(2021, 12, 2, 17, 3, 54, 946, DateTimeKind.Local).AddTicks(7744),
                            CreatedBy = "Franklin_Gottlieb",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 54, 950, DateTimeKind.Local).AddTicks(8316),
                            OpenSlots = 100,
                            TestLabId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            AvailableDate = new DateTime(2021, 12, 2, 17, 3, 54, 946, DateTimeKind.Local).AddTicks(7744),
                            CreatedBy = "Carlos.Reilly",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 54, 950, DateTimeKind.Local).AddTicks(8316),
                            OpenSlots = 94,
                            TestLabId = 7L
                        },
                        new
                        {
                            Id = 5L,
                            AvailableDate = new DateTime(2021, 12, 2, 17, 3, 54, 946, DateTimeKind.Local).AddTicks(7744),
                            CreatedBy = "Renee28",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 54, 950, DateTimeKind.Local).AddTicks(8316),
                            OpenSlots = 79,
                            TestLabId = 9L
                        },
                        new
                        {
                            Id = 6L,
                            AvailableDate = new DateTime(2021, 12, 2, 17, 3, 54, 946, DateTimeKind.Local).AddTicks(7744),
                            CreatedBy = "Pat_Leffler18",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 54, 950, DateTimeKind.Local).AddTicks(8316),
                            OpenSlots = 91,
                            TestLabId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            AvailableDate = new DateTime(2021, 12, 2, 17, 3, 54, 946, DateTimeKind.Local).AddTicks(7744),
                            CreatedBy = "Shannon_Armstrong16",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 54, 950, DateTimeKind.Local).AddTicks(8316),
                            OpenSlots = 94,
                            TestLabId = 10L
                        },
                        new
                        {
                            Id = 8L,
                            AvailableDate = new DateTime(2021, 12, 2, 17, 3, 54, 946, DateTimeKind.Local).AddTicks(7744),
                            CreatedBy = "Kathryn90",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 54, 950, DateTimeKind.Local).AddTicks(8316),
                            OpenSlots = 96,
                            TestLabId = 11L
                        },
                        new
                        {
                            Id = 9L,
                            AvailableDate = new DateTime(2021, 12, 2, 17, 3, 54, 946, DateTimeKind.Local).AddTicks(7744),
                            CreatedBy = "Doreen.Wisoky",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 54, 950, DateTimeKind.Local).AddTicks(8316),
                            OpenSlots = 58,
                            TestLabId = 3L
                        },
                        new
                        {
                            Id = 10L,
                            AvailableDate = new DateTime(2021, 12, 2, 17, 3, 54, 946, DateTimeKind.Local).AddTicks(7744),
                            CreatedBy = "Joel.Lind1",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 54, 950, DateTimeKind.Local).AddTicks(8316),
                            OpenSlots = 98,
                            TestLabId = 2L
                        },
                        new
                        {
                            Id = 11L,
                            AvailableDate = new DateTime(2021, 12, 2, 17, 3, 54, 946, DateTimeKind.Local).AddTicks(7744),
                            CreatedBy = "Catherine_Gerhold62",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 54, 950, DateTimeKind.Local).AddTicks(8316),
                            OpenSlots = 81,
                            TestLabId = 4L
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.Patients", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber", "Email");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Age = 0,
                            CreatedBy = "Patty.Stroman42",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1997, 1, 14, 0, 33, 59, 532, DateTimeKind.Local).AddTicks(9728),
                            Email = "Patty52@gmail.com",
                            FirstName = "Eda",
                            Gender = "Female",
                            LastName = "Schoen",
                            PhoneNumber = "07018484438"
                        },
                        new
                        {
                            Id = 2L,
                            Age = 0,
                            CreatedBy = "Grady.Turner30",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1987, 8, 15, 7, 12, 55, 824, DateTimeKind.Local).AddTicks(4425),
                            Email = "Grady9@gmail.com",
                            FirstName = "Damion",
                            Gender = "Female",
                            LastName = "Cummerata",
                            PhoneNumber = "07002453515"
                        },
                        new
                        {
                            Id = 3L,
                            Age = 0,
                            CreatedBy = "Florence_Reichel",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1983, 5, 18, 6, 32, 10, 930, DateTimeKind.Local).AddTicks(4909),
                            Email = "Florence84@gmail.com",
                            FirstName = "Reed",
                            Gender = "Male",
                            LastName = "Schaefer",
                            PhoneNumber = "07082478059"
                        },
                        new
                        {
                            Id = 4L,
                            Age = 0,
                            CreatedBy = "Gerald.Hammes",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1992, 2, 23, 5, 34, 59, 815, DateTimeKind.Local).AddTicks(2165),
                            Email = "Gerald_Hammes51@gmail.com",
                            FirstName = "Giovanna",
                            Gender = "Male",
                            LastName = "Rippin",
                            PhoneNumber = "07004915374"
                        },
                        new
                        {
                            Id = 5L,
                            Age = 0,
                            CreatedBy = "Melvin_Boyer",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1965, 9, 28, 14, 28, 36, 996, DateTimeKind.Local).AddTicks(6757),
                            Email = "Melvin.Boyer35@gmail.com",
                            FirstName = "Carolyne",
                            Gender = "Female",
                            LastName = "Hermann",
                            PhoneNumber = "07077153720"
                        },
                        new
                        {
                            Id = 6L,
                            Age = 0,
                            CreatedBy = "Henry.Davis",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1967, 4, 28, 13, 36, 2, 116, DateTimeKind.Local).AddTicks(4775),
                            Email = "Henry_Davis48@hotmail.com",
                            FirstName = "Giovanny",
                            Gender = "Male",
                            LastName = "Gorczany",
                            PhoneNumber = "07010243314"
                        },
                        new
                        {
                            Id = 7L,
                            Age = 0,
                            CreatedBy = "Franklin.Mayert",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1968, 12, 18, 1, 5, 17, 365, DateTimeKind.Local).AddTicks(7848),
                            Email = "Franklin48@gmail.com",
                            FirstName = "Loy",
                            Gender = "Female",
                            LastName = "Miller",
                            PhoneNumber = "07035028822"
                        },
                        new
                        {
                            Id = 8L,
                            Age = 0,
                            CreatedBy = "Lindsay_Abbott",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1955, 9, 17, 10, 57, 28, 967, DateTimeKind.Local).AddTicks(4999),
                            Email = "Lindsay43@hotmail.com",
                            FirstName = "Elenor",
                            Gender = "Female",
                            LastName = "Hilll",
                            PhoneNumber = "07019772188"
                        },
                        new
                        {
                            Id = 9L,
                            Age = 0,
                            CreatedBy = "Marsha95",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1972, 3, 23, 23, 25, 16, 279, DateTimeKind.Local).AddTicks(7839),
                            Email = "Marsha.Dach88@yahoo.com",
                            FirstName = "Adriel",
                            Gender = "Male",
                            LastName = "Schiller",
                            PhoneNumber = "07043187494"
                        },
                        new
                        {
                            Id = 10L,
                            Age = 0,
                            CreatedBy = "Gina.Wehner82",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1962, 12, 8, 13, 21, 59, 22, DateTimeKind.Local).AddTicks(9890),
                            Email = "Gina.Wehner81@yahoo.com",
                            FirstName = "Larue",
                            Gender = "Male",
                            LastName = "Haag",
                            PhoneNumber = "07056991642"
                        },
                        new
                        {
                            Id = 11L,
                            Age = 0,
                            CreatedBy = "Nicolas_Abshire92",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1994, 5, 20, 15, 11, 53, 713, DateTimeKind.Local).AddTicks(4422),
                            Email = "Nicolas19@yahoo.com",
                            FirstName = "Gerard",
                            Gender = "Male",
                            LastName = "Boehm",
                            PhoneNumber = "07079279175"
                        },
                        new
                        {
                            Id = 12L,
                            Age = 0,
                            CreatedBy = "Antonia57",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1966, 10, 19, 23, 39, 14, 414, DateTimeKind.Local).AddTicks(8948),
                            Email = "Antonia_Weber@hotmail.com",
                            FirstName = "Gerry",
                            Gender = "Male",
                            LastName = "King",
                            PhoneNumber = "07076350756"
                        },
                        new
                        {
                            Id = 13L,
                            Age = 0,
                            CreatedBy = "Diane.Cassin80",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1954, 8, 27, 6, 45, 12, 206, DateTimeKind.Local).AddTicks(3125),
                            Email = "Diane_Cassin92@hotmail.com",
                            FirstName = "Dawn",
                            Gender = "Male",
                            LastName = "Zemlak",
                            PhoneNumber = "07047239045"
                        },
                        new
                        {
                            Id = 14L,
                            Age = 0,
                            CreatedBy = "Neil27",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1951, 12, 31, 6, 2, 41, 958, DateTimeKind.Local).AddTicks(3519),
                            Email = "Neil_Kreiger@hotmail.com",
                            FirstName = "Vallie",
                            Gender = "Male",
                            LastName = "Wolff",
                            PhoneNumber = "07093448968"
                        },
                        new
                        {
                            Id = 15L,
                            Age = 0,
                            CreatedBy = "Megan_Weber35",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1981, 7, 23, 16, 38, 0, 247, DateTimeKind.Local).AddTicks(5227),
                            Email = "Megan.Weber50@yahoo.com",
                            FirstName = "Rosalind",
                            Gender = "Female",
                            LastName = "Cremin",
                            PhoneNumber = "07012488978"
                        },
                        new
                        {
                            Id = 16L,
                            Age = 0,
                            CreatedBy = "Luke_Purdy",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1972, 6, 21, 3, 16, 24, 247, DateTimeKind.Local).AddTicks(8241),
                            Email = "Luke.Purdy84@yahoo.com",
                            FirstName = "Jevon",
                            Gender = "Female",
                            LastName = "Ratke",
                            PhoneNumber = "07076756250"
                        },
                        new
                        {
                            Id = 17L,
                            Age = 0,
                            CreatedBy = "Sophia.Adams",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1987, 1, 13, 1, 48, 17, 878, DateTimeKind.Local).AddTicks(9143),
                            Email = "Sophia.Adams@yahoo.com",
                            FirstName = "Demetrius",
                            Gender = "Male",
                            LastName = "Lueilwitz",
                            PhoneNumber = "07069840573"
                        },
                        new
                        {
                            Id = 18L,
                            Age = 0,
                            CreatedBy = "Sammy.Berge50",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1962, 8, 29, 18, 28, 23, 331, DateTimeKind.Local).AddTicks(2195),
                            Email = "Sammy_Berge@hotmail.com",
                            FirstName = "Megane",
                            Gender = "Male",
                            LastName = "Will",
                            PhoneNumber = "07075611389"
                        },
                        new
                        {
                            Id = 19L,
                            Age = 0,
                            CreatedBy = "Gwen_Wintheiser20",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1956, 3, 12, 20, 8, 14, 830, DateTimeKind.Local).AddTicks(8608),
                            Email = "Gwen_Wintheiser@hotmail.com",
                            FirstName = "Florian",
                            Gender = "Female",
                            LastName = "Kessler",
                            PhoneNumber = "07031557914"
                        },
                        new
                        {
                            Id = 20L,
                            Age = 0,
                            CreatedBy = "Camille.OConnell24",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 17, DateTimeKind.Local).AddTicks(135),
                            DateOfBirth = new DateTime(1994, 8, 26, 14, 37, 23, 479, DateTimeKind.Local).AddTicks(6912),
                            Email = "Camille.OConnell15@gmail.com",
                            FirstName = "Jocelyn",
                            Gender = "Male",
                            LastName = "Hettinger",
                            PhoneNumber = "07096557640"
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.ReportEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CancelledOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Format")
                        .HasColumnType("int");

                    b.Property<DateTime?>("From")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReportStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestObject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TreatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ReportEntity");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestBookings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AvailableTestDayId")
                        .HasColumnType("bigint");

                    b.Property<string>("BookingReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long>("VaccineTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailableTestDayId");

                    b.HasIndex("BookingReference");

                    b.HasIndex("PatientId");

                    b.HasIndex("VaccineTypeId");

                    b.ToTable("TestBookings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailableTestDayId = 4L,
                            BookingReference = "GARUPPL8LP",
                            BookingStatus = "Booked",
                            CreatedBy = "Nichole29",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 42, DateTimeKind.Local).AddTicks(3026),
                            PatientId = 5L,
                            VaccineTypeId = 2L
                        },
                        new
                        {
                            Id = 2L,
                            AvailableTestDayId = 7L,
                            BookingReference = "ZNI7WM7875",
                            BookingStatus = "Booked",
                            CreatedBy = "Rebecca13",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 42, DateTimeKind.Local).AddTicks(3026),
                            PatientId = 2L,
                            VaccineTypeId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AvailableTestDayId = 5L,
                            BookingReference = "0EPSJ3OISY",
                            BookingStatus = "Booked",
                            CreatedBy = "Leo_Gorczany20",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 42, DateTimeKind.Local).AddTicks(3026),
                            PatientId = 3L,
                            VaccineTypeId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            AvailableTestDayId = 2L,
                            BookingReference = "8LXF7SFIR2",
                            BookingStatus = "Booked",
                            CreatedBy = "Beulah.Bartell",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 42, DateTimeKind.Local).AddTicks(3026),
                            PatientId = 9L,
                            VaccineTypeId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            AvailableTestDayId = 5L,
                            BookingReference = "LT2LM4ZEHY",
                            BookingStatus = "Booked",
                            CreatedBy = "Elvira_Schaefer",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 42, DateTimeKind.Local).AddTicks(3026),
                            PatientId = 9L,
                            VaccineTypeId = 3L
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestLabs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LabName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("TestLocationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LabName");

                    b.HasIndex("TestLocationId");

                    b.ToTable("TestLabs");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = "Mindy33",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 107, DateTimeKind.Local).AddTicks(35),
                            IsActive = true,
                            LabName = "Medbury Services Limited",
                            TestLocationId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = "Erick84",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 107, DateTimeKind.Local).AddTicks(35),
                            IsActive = true,
                            LabName = "Sahel Lab",
                            TestLocationId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = "Casey56",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 107, DateTimeKind.Local).AddTicks(35),
                            IsActive = true,
                            LabName = "Epiconsult clinic and Diagnostics Center",
                            TestLocationId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = "Beatrice.Lowe57",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 107, DateTimeKind.Local).AddTicks(35),
                            IsActive = true,
                            LabName = "Centolab",
                            TestLocationId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = "Tommie_Schaefer",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 107, DateTimeKind.Local).AddTicks(35),
                            IsActive = true,
                            LabName = "A-Medik Molecular Laboratory",
                            TestLocationId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = "Mary.Hirthe71",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 107, DateTimeKind.Local).AddTicks(35),
                            IsActive = true,
                            LabName = "Cedarcrest Hospital Molecular Laboratory",
                            TestLocationId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedBy = "Jackie17",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 107, DateTimeKind.Local).AddTicks(35),
                            IsActive = true,
                            LabName = "Clina Lancet",
                            TestLocationId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedBy = "Hilda.Heidenreich",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 107, DateTimeKind.Local).AddTicks(35),
                            IsActive = true,
                            LabName = "Biologix Support Services",
                            TestLocationId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            CreatedBy = "Olive.Rohan",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 107, DateTimeKind.Local).AddTicks(35),
                            IsActive = true,
                            LabName = "Clinix Healthcare",
                            TestLocationId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            CreatedBy = "Blake57",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 107, DateTimeKind.Local).AddTicks(35),
                            IsActive = true,
                            LabName = "Reddington Zainelab",
                            TestLocationId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            CreatedBy = "Brandy.Bogan",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 107, DateTimeKind.Local).AddTicks(35),
                            IsActive = true,
                            LabName = "Medbury Services Limited",
                            TestLocationId = 3L
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestLocations", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOperational")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("City");

                    b.ToTable("TestLocations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "Abuja",
                            Country = "Nigeria",
                            CreatedBy = "Margaret7",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 115, DateTimeKind.Local).AddTicks(7897),
                            IsOperational = true
                        },
                        new
                        {
                            Id = 2L,
                            City = "Lagos",
                            Country = "Nigeria",
                            CreatedBy = "Wallace4",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 115, DateTimeKind.Local).AddTicks(7897),
                            IsOperational = true
                        },
                        new
                        {
                            Id = 3L,
                            City = "Port-harcourt",
                            Country = "Nigeria",
                            CreatedBy = "Roger13",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 115, DateTimeKind.Local).AddTicks(7897),
                            IsOperational = true
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.VaccineTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RecommendedAge")
                        .HasColumnType("int");

                    b.Property<long?>("TestLabsId")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalSupplied")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("TestLabsId");

                    b.ToTable("VaccineTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = "Gina0",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 123, DateTimeKind.Local).AddTicks(9426),
                            Description = "Accounts solid state Gorgeous Fresh Salad maximize Public-key matrix interfaces applications Organized Rial Omani Optional Delaware Avon functionalities Borders mission-critical Missouri Face to face Home Loan Account Route",
                            IsApproved = true,
                            Name = "Pfizer-BioNTech",
                            RecommendedAge = 5,
                            TotalSupplied = 813
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = "Michael_Reilly14",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 123, DateTimeKind.Local).AddTicks(9426),
                            Description = "Music, Home & Tools Cambridgeshire Oklahoma Uganda TCP deposit hack Rubber Enhanced Markets plum online interface New Caledonia Credit Card Account Burundi Cordoba Oro deposit firmware withdrawal",
                            IsApproved = true,
                            Name = "Moderna",
                            RecommendedAge = 18,
                            TotalSupplied = 630
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = "Andrew_Dare",
                            CreatedOn = new DateTime(2021, 12, 1, 17, 3, 55, 123, DateTimeKind.Local).AddTicks(9426),
                            Description = "implementation facilitate transmitter Lock withdrawal SSL Forward Industrial & Health Kuwait Assistant Generic interactive unleash Licensed whiteboard withdrawal Small deposit Liaison Configuration",
                            IsApproved = false,
                            Name = "Johnson & Johnson’s",
                            RecommendedAge = 18,
                            TotalSupplied = 963
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.AvailableTestDays", b =>
                {
                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.TestLabs", "TestLab")
                        .WithMany("AvailableDays")
                        .HasForeignKey("TestLabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestLab");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestBookings", b =>
                {
                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.AvailableTestDays", "AvailableTestDay")
                        .WithMany()
                        .HasForeignKey("AvailableTestDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.Patients", "Patient")
                        .WithMany("TestBookings")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.VaccineTypes", "VaccineType")
                        .WithMany()
                        .HasForeignKey("VaccineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Thynk.Covid19Pcr.Domain.Entities.CovidTestResult", "TestResult", b1 =>
                        {
                            b1.Property<long>("TestBookingsId")
                                .HasColumnType("bigint");

                            b1.Property<int>("ResultType")
                                .HasColumnType("int");

                            b1.Property<DateTime>("TestResultDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("TestBookingsId");

                            b1.ToTable("CovidTestResult");

                            b1.WithOwner()
                                .HasForeignKey("TestBookingsId");
                        });

                    b.Navigation("AvailableTestDay");

                    b.Navigation("Patient");

                    b.Navigation("TestResult");

                    b.Navigation("VaccineType");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestLabs", b =>
                {
                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.TestLocations", "TestLocation")
                        .WithMany("LabsInLocation")
                        .HasForeignKey("TestLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestLocation");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.VaccineTypes", b =>
                {
                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.TestLabs", null)
                        .WithMany("Vaccines")
                        .HasForeignKey("TestLabsId");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.Patients", b =>
                {
                    b.Navigation("TestBookings");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestLabs", b =>
                {
                    b.Navigation("AvailableDays");

                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestLocations", b =>
                {
                    b.Navigation("LabsInLocation");
                });
#pragma warning restore 612, 618
        }
    }
}
