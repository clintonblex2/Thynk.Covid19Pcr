// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Thynk.Covid19Pcr.Infrastructure.DbContexts;

namespace Thynk.Covid19Pcr.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211130194336_UpdatedBookingRefColSize")]
    partial class UpdatedBookingRefColSize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.AvailableTestDays", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AvailableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OpenSlots")
                        .HasColumnType("int");

                    b.Property<long>("TestLabId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TestLabId");

                    b.ToTable("AvailableTestDays");

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 43, 33, 693, DateTimeKind.Local).AddTicks(9709),
                            CreatedBy = "Clifford_Bergstrom68",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 700, DateTimeKind.Local).AddTicks(189),
                            OpenSlots = 90,
                            TestLabId = 5L
                        },
                        new
                        {
                            Id = 3L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 43, 33, 693, DateTimeKind.Local).AddTicks(9709),
                            CreatedBy = "Darlene.Kuhlman",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 700, DateTimeKind.Local).AddTicks(189),
                            OpenSlots = 98,
                            TestLabId = 8L
                        },
                        new
                        {
                            Id = 4L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 43, 33, 693, DateTimeKind.Local).AddTicks(9709),
                            CreatedBy = "Sandy36",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 700, DateTimeKind.Local).AddTicks(189),
                            OpenSlots = 88,
                            TestLabId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 43, 33, 693, DateTimeKind.Local).AddTicks(9709),
                            CreatedBy = "Amy.Ledner",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 700, DateTimeKind.Local).AddTicks(189),
                            OpenSlots = 68,
                            TestLabId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 43, 33, 693, DateTimeKind.Local).AddTicks(9709),
                            CreatedBy = "Christopher40",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 700, DateTimeKind.Local).AddTicks(189),
                            OpenSlots = 80,
                            TestLabId = 9L
                        },
                        new
                        {
                            Id = 7L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 43, 33, 693, DateTimeKind.Local).AddTicks(9709),
                            CreatedBy = "Dennis_Littel",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 700, DateTimeKind.Local).AddTicks(189),
                            OpenSlots = 78,
                            TestLabId = 6L
                        },
                        new
                        {
                            Id = 8L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 43, 33, 693, DateTimeKind.Local).AddTicks(9709),
                            CreatedBy = "Christina_Jerde5",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 700, DateTimeKind.Local).AddTicks(189),
                            OpenSlots = 95,
                            TestLabId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 43, 33, 693, DateTimeKind.Local).AddTicks(9709),
                            CreatedBy = "Toni.Flatley",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 700, DateTimeKind.Local).AddTicks(189),
                            OpenSlots = 76,
                            TestLabId = 8L
                        },
                        new
                        {
                            Id = 10L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 43, 33, 693, DateTimeKind.Local).AddTicks(9709),
                            CreatedBy = "Tanya.Mante",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 700, DateTimeKind.Local).AddTicks(189),
                            OpenSlots = 94,
                            TestLabId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            AvailableDate = new DateTime(2021, 12, 1, 20, 43, 33, 693, DateTimeKind.Local).AddTicks(9709),
                            CreatedBy = "Marsha.Boyle58",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 700, DateTimeKind.Local).AddTicks(189),
                            OpenSlots = 56,
                            TestLabId = 3L
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.Patients", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber", "Email");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Age = 0,
                            CreatedBy = "Mario49",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1983, 1, 21, 19, 6, 46, 240, DateTimeKind.Local).AddTicks(5162),
                            Email = "Mario_DuBuque96@yahoo.com",
                            FirstName = "Laurel",
                            Gender = "Male",
                            LastName = "Grant",
                            PhoneNumber = "07021672209"
                        },
                        new
                        {
                            Id = 2L,
                            Age = 0,
                            CreatedBy = "Damon.Nicolas91",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1964, 12, 8, 22, 45, 53, 930, DateTimeKind.Local).AddTicks(1323),
                            Email = "Damon_Nicolas@hotmail.com",
                            FirstName = "Frederik",
                            Gender = "Male",
                            LastName = "Jacobs",
                            PhoneNumber = "07027604472"
                        },
                        new
                        {
                            Id = 3L,
                            Age = 0,
                            CreatedBy = "Joel.Leuschke",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1962, 4, 20, 2, 2, 29, 145, DateTimeKind.Local).AddTicks(8326),
                            Email = "Joel.Leuschke@hotmail.com",
                            FirstName = "Rowan",
                            Gender = "Female",
                            LastName = "Steuber",
                            PhoneNumber = "07069127229"
                        },
                        new
                        {
                            Id = 4L,
                            Age = 0,
                            CreatedBy = "Stewart.Raynor",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1997, 11, 13, 0, 0, 48, 706, DateTimeKind.Local).AddTicks(4149),
                            Email = "Stewart88@gmail.com",
                            FirstName = "Willow",
                            Gender = "Male",
                            LastName = "Bashirian",
                            PhoneNumber = "07065488423"
                        },
                        new
                        {
                            Id = 5L,
                            Age = 0,
                            CreatedBy = "Teri.Koss",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1971, 6, 24, 20, 30, 0, 616, DateTimeKind.Local).AddTicks(2279),
                            Email = "Teri22@yahoo.com",
                            FirstName = "Nettie",
                            Gender = "Female",
                            LastName = "Hessel",
                            PhoneNumber = "07017293072"
                        },
                        new
                        {
                            Id = 6L,
                            Age = 0,
                            CreatedBy = "Omar24",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1971, 8, 25, 10, 41, 22, 244, DateTimeKind.Local).AddTicks(1850),
                            Email = "Omar_Zieme47@hotmail.com",
                            FirstName = "Makenzie",
                            Gender = "Female",
                            LastName = "Heathcote",
                            PhoneNumber = "07050406475"
                        },
                        new
                        {
                            Id = 7L,
                            Age = 0,
                            CreatedBy = "Allison_Romaguera",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1962, 2, 1, 4, 10, 54, 11, DateTimeKind.Local).AddTicks(653),
                            Email = "Allison_Romaguera@gmail.com",
                            FirstName = "Anthony",
                            Gender = "Male",
                            LastName = "Runte",
                            PhoneNumber = "07087265285"
                        },
                        new
                        {
                            Id = 8L,
                            Age = 0,
                            CreatedBy = "Brandy_Cronin10",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1977, 8, 26, 5, 32, 37, 535, DateTimeKind.Local).AddTicks(3602),
                            Email = "Brandy_Cronin@gmail.com",
                            FirstName = "Alessandro",
                            Gender = "Female",
                            LastName = "McGlynn",
                            PhoneNumber = "07095457447"
                        },
                        new
                        {
                            Id = 9L,
                            Age = 0,
                            CreatedBy = "Craig_Stamm",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1959, 11, 27, 16, 26, 17, 774, DateTimeKind.Local).AddTicks(142),
                            Email = "Craig.Stamm61@hotmail.com",
                            FirstName = "Francesco",
                            Gender = "Female",
                            LastName = "Jacobi",
                            PhoneNumber = "07092015226"
                        },
                        new
                        {
                            Id = 10L,
                            Age = 0,
                            CreatedBy = "Laverne41",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1954, 9, 11, 21, 29, 19, 202, DateTimeKind.Local).AddTicks(9772),
                            Email = "Laverne.Wiegand@gmail.com",
                            FirstName = "Dominique",
                            Gender = "Male",
                            LastName = "Langworth",
                            PhoneNumber = "07001618960"
                        },
                        new
                        {
                            Id = 11L,
                            Age = 0,
                            CreatedBy = "Damon.Oberbrunner",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1963, 10, 28, 5, 50, 49, 422, DateTimeKind.Local).AddTicks(301),
                            Email = "Damon.Oberbrunner@gmail.com",
                            FirstName = "Summer",
                            Gender = "Female",
                            LastName = "Collier",
                            PhoneNumber = "07050199664"
                        },
                        new
                        {
                            Id = 12L,
                            Age = 0,
                            CreatedBy = "Iris_Dooley",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1952, 11, 6, 8, 0, 19, 473, DateTimeKind.Local).AddTicks(3738),
                            Email = "Iris.Dooley20@yahoo.com",
                            FirstName = "Everardo",
                            Gender = "Male",
                            LastName = "Kunde",
                            PhoneNumber = "07032817360"
                        },
                        new
                        {
                            Id = 13L,
                            Age = 0,
                            CreatedBy = "Melvin_Beahan",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1980, 10, 9, 7, 52, 43, 223, DateTimeKind.Local).AddTicks(7615),
                            Email = "Melvin.Beahan@gmail.com",
                            FirstName = "Novella",
                            Gender = "Male",
                            LastName = "Moen",
                            PhoneNumber = "07092176694"
                        },
                        new
                        {
                            Id = 14L,
                            Age = 0,
                            CreatedBy = "Guadalupe.White99",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1952, 10, 3, 18, 31, 47, 996, DateTimeKind.Local).AddTicks(48),
                            Email = "Guadalupe.White29@hotmail.com",
                            FirstName = "Soledad",
                            Gender = "Female",
                            LastName = "Russel",
                            PhoneNumber = "07075368833"
                        },
                        new
                        {
                            Id = 15L,
                            Age = 0,
                            CreatedBy = "Alice_Daugherty9",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1996, 2, 19, 18, 0, 18, 591, DateTimeKind.Local).AddTicks(6754),
                            Email = "Alice.Daugherty@hotmail.com",
                            FirstName = "Victoria",
                            Gender = "Female",
                            LastName = "Becker",
                            PhoneNumber = "07006591099"
                        },
                        new
                        {
                            Id = 16L,
                            Age = 0,
                            CreatedBy = "Irene96",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1956, 7, 29, 14, 10, 54, 845, DateTimeKind.Local).AddTicks(328),
                            Email = "Irene.Kuhn81@gmail.com",
                            FirstName = "Milo",
                            Gender = "Female",
                            LastName = "Borer",
                            PhoneNumber = "07081866084"
                        },
                        new
                        {
                            Id = 17L,
                            Age = 0,
                            CreatedBy = "Susan_Sauer",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1957, 8, 6, 12, 1, 34, 826, DateTimeKind.Local).AddTicks(4063),
                            Email = "Susan79@yahoo.com",
                            FirstName = "Jovanny",
                            Gender = "Female",
                            LastName = "Beer",
                            PhoneNumber = "07081619558"
                        },
                        new
                        {
                            Id = 18L,
                            Age = 0,
                            CreatedBy = "Felicia_Green5",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(2001, 2, 1, 8, 18, 10, 986, DateTimeKind.Local).AddTicks(3662),
                            Email = "Felicia.Green@yahoo.com",
                            FirstName = "Maurice",
                            Gender = "Male",
                            LastName = "Hermiston",
                            PhoneNumber = "07063968714"
                        },
                        new
                        {
                            Id = 19L,
                            Age = 0,
                            CreatedBy = "Teresa.Cummings44",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1986, 5, 5, 16, 2, 19, 167, DateTimeKind.Local).AddTicks(971),
                            Email = "Teresa25@yahoo.com",
                            FirstName = "Walton",
                            Gender = "Male",
                            LastName = "Mante",
                            PhoneNumber = "07090268023"
                        },
                        new
                        {
                            Id = 20L,
                            Age = 0,
                            CreatedBy = "Sherman11",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 838, DateTimeKind.Local).AddTicks(2774),
                            DateOfBirth = new DateTime(1957, 2, 20, 22, 2, 18, 819, DateTimeKind.Local).AddTicks(8678),
                            Email = "Sherman18@yahoo.com",
                            FirstName = "Rachel",
                            Gender = "Female",
                            LastName = "Hilll",
                            PhoneNumber = "07016646797"
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestBookings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AvailableTestDayId")
                        .HasColumnType("bigint");

                    b.Property<string>("BookingReference")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long>("VaccineTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailableTestDayId");

                    b.HasIndex("BookingReference");

                    b.HasIndex("PatientId");

                    b.HasIndex("VaccineTypeId");

                    b.ToTable("TestBookings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailableTestDayId = 5L,
                            BookingReference = "NS5CRJZNE9",
                            BookingStatus = "Booked",
                            CreatedBy = "Jerome_Turcotte",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 902, DateTimeKind.Local).AddTicks(8111),
                            PatientId = 4L,
                            VaccineTypeId = 2L
                        },
                        new
                        {
                            Id = 2L,
                            AvailableTestDayId = 8L,
                            BookingReference = "FX0LLST6HK",
                            BookingStatus = "Booked",
                            CreatedBy = "Loretta_Shields",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 902, DateTimeKind.Local).AddTicks(8111),
                            PatientId = 5L,
                            VaccineTypeId = 3L
                        },
                        new
                        {
                            Id = 3L,
                            AvailableTestDayId = 7L,
                            BookingReference = "NG9JXUD5X6",
                            BookingStatus = "Booked",
                            CreatedBy = "Irma_Pfannerstill",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 902, DateTimeKind.Local).AddTicks(8111),
                            PatientId = 1L,
                            VaccineTypeId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            AvailableTestDayId = 9L,
                            BookingReference = "I9WEXDJF8R",
                            BookingStatus = "Booked",
                            CreatedBy = "Marco_Dicki92",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 902, DateTimeKind.Local).AddTicks(8111),
                            PatientId = 3L,
                            VaccineTypeId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            AvailableTestDayId = 6L,
                            BookingReference = "OKW93C0VJ7",
                            BookingStatus = "Booked",
                            CreatedBy = "Faye_Will31",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 33, 902, DateTimeKind.Local).AddTicks(8111),
                            PatientId = 4L,
                            VaccineTypeId = 1L
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestLabs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LabName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("TestLocationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LabName");

                    b.HasIndex("TestLocationId");

                    b.ToTable("TestLabs");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = "Vicki78",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 126, DateTimeKind.Local).AddTicks(2945),
                            IsActive = true,
                            LabName = "Medbury Services Limited",
                            TestLocationId = 2L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = "Peggy85",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 126, DateTimeKind.Local).AddTicks(2945),
                            IsActive = true,
                            LabName = "Sahel Lab",
                            TestLocationId = 3L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = "Travis_Stokes",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 126, DateTimeKind.Local).AddTicks(2945),
                            IsActive = true,
                            LabName = "Epiconsult clinic and Diagnostics Center",
                            TestLocationId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = "Jeanette36",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 126, DateTimeKind.Local).AddTicks(2945),
                            IsActive = true,
                            LabName = "Centolab",
                            TestLocationId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = "Traci.Kiehn94",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 126, DateTimeKind.Local).AddTicks(2945),
                            IsActive = true,
                            LabName = "A-Medik Molecular Laboratory",
                            TestLocationId = 3L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = "Jacob.Williamson44",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 126, DateTimeKind.Local).AddTicks(2945),
                            IsActive = true,
                            LabName = "Cedarcrest Hospital Molecular Laboratory",
                            TestLocationId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedBy = "Renee56",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 126, DateTimeKind.Local).AddTicks(2945),
                            IsActive = true,
                            LabName = "Clina Lancet",
                            TestLocationId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedBy = "Stewart87",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 126, DateTimeKind.Local).AddTicks(2945),
                            IsActive = true,
                            LabName = "Biologix Support Services",
                            TestLocationId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            CreatedBy = "Rudolph66",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 126, DateTimeKind.Local).AddTicks(2945),
                            IsActive = true,
                            LabName = "Clinix Healthcare",
                            TestLocationId = 3L
                        },
                        new
                        {
                            Id = 10L,
                            CreatedBy = "Ramon_Spinka",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 126, DateTimeKind.Local).AddTicks(2945),
                            IsActive = true,
                            LabName = "Reddington Zainelab",
                            TestLocationId = 2L
                        },
                        new
                        {
                            Id = 11L,
                            CreatedBy = "Terrance35",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 126, DateTimeKind.Local).AddTicks(2945),
                            IsActive = true,
                            LabName = "Medbury Services Limited",
                            TestLocationId = 2L
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestLocations", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOperational")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("City");

                    b.ToTable("TestLocations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "Abuja",
                            Country = "Nigeria",
                            CreatedBy = "Shawn_Stokes37",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 193, DateTimeKind.Local).AddTicks(5026),
                            IsOperational = true
                        },
                        new
                        {
                            Id = 2L,
                            City = "Lagos",
                            Country = "Nigeria",
                            CreatedBy = "Cornelius.Lueilwitz",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 193, DateTimeKind.Local).AddTicks(5026),
                            IsOperational = true
                        },
                        new
                        {
                            Id = 3L,
                            City = "Port-harcourt",
                            Country = "Nigeria",
                            CreatedBy = "Pauline95",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 193, DateTimeKind.Local).AddTicks(5026),
                            IsOperational = true
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.VaccineTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RecommendedAge")
                        .HasColumnType("int");

                    b.Property<long?>("TestLabsId")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalSupplied")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("TestLabsId");

                    b.ToTable("VaccineTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = "Terence.Auer72",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 262, DateTimeKind.Local).AddTicks(4670),
                            Description = "Sleek channels Checking Account Credit Card Account Handmade Steel Tuna Palladium Lock Incredible Cotton Gloves multi-byte backing up deposit CFA Franc BCEAO Investor invoice Vatu client-server Global morph repurpose Wooden",
                            IsApproved = false,
                            Name = "Pfizer-BioNTech",
                            RecommendedAge = 5,
                            TotalSupplied = 1000
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = "Steve68",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 262, DateTimeKind.Local).AddTicks(4670),
                            Description = "connect e-business Guyana Dollar Fantastic Rubber Keyboard SCSI Designer Concrete Exclusive Dynamic protocol XSS Ville optimize Interactions Auto Loan Account Portugal Front-line Nebraska Gorgeous Fresh Pizza analyzer",
                            IsApproved = false,
                            Name = "Moderna",
                            RecommendedAge = 18,
                            TotalSupplied = 912
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = "Marguerite_Treutel56",
                            CreatedOn = new DateTime(2021, 11, 30, 20, 43, 34, 262, DateTimeKind.Local).AddTicks(4670),
                            Description = "Camp Stravenue Investment Account Agent Czech Koruna Developer initiatives Small Wooden Shoes Investor throughput Unbranded multi-tasking San Marino Electronics & Home Intelligent Rubber Mouse transmitting Massachusetts Lakes Concrete Stravenue",
                            IsApproved = false,
                            Name = "Johnson & Johnson’s",
                            RecommendedAge = 18,
                            TotalSupplied = 743
                        });
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.AvailableTestDays", b =>
                {
                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.TestLabs", "TestLab")
                        .WithMany("AvailableDays")
                        .HasForeignKey("TestLabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestLab");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestBookings", b =>
                {
                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.AvailableTestDays", "AvailableTestDay")
                        .WithMany()
                        .HasForeignKey("AvailableTestDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.Patients", "Patient")
                        .WithMany("TestBookings")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.VaccineTypes", "VaccineType")
                        .WithMany()
                        .HasForeignKey("VaccineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Thynk.Covid19Pcr.Domain.Entities.CovidTestResult", "TestResult", b1 =>
                        {
                            b1.Property<long>("TestBookingsId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("ResultType")
                                .HasColumnType("int");

                            b1.Property<DateTime>("TestResultDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("TestBookingsId");

                            b1.ToTable("TestBookings");

                            b1.WithOwner()
                                .HasForeignKey("TestBookingsId");
                        });

                    b.Navigation("AvailableTestDay");

                    b.Navigation("Patient");

                    b.Navigation("TestResult");

                    b.Navigation("VaccineType");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestLabs", b =>
                {
                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.TestLocations", "TestLocation")
                        .WithMany("LabsInLocation")
                        .HasForeignKey("TestLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestLocation");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.VaccineTypes", b =>
                {
                    b.HasOne("Thynk.Covid19Pcr.Domain.Entities.TestLabs", null)
                        .WithMany("Vaccines")
                        .HasForeignKey("TestLabsId");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.Patients", b =>
                {
                    b.Navigation("TestBookings");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestLabs", b =>
                {
                    b.Navigation("AvailableDays");

                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("Thynk.Covid19Pcr.Domain.Entities.TestLocations", b =>
                {
                    b.Navigation("LabsInLocation");
                });
#pragma warning restore 612, 618
        }
    }
}
